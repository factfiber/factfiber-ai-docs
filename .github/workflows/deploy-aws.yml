name: Deploy to AWS

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/**'
      - '.github/workflows/deploy-aws.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Documentation to AWS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git-revision-date plugin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --with docs

      - name: Build documentation
        run: |
          poetry run mkdocs build --strict

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Deploy to S3
        run: |
          aws s3 sync site/ s3://${{ secrets.DOCS_S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=3600" \
            --metadata-directive REPLACE

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Post deployment check
        run: |
          echo "Deployment complete!"
          echo "Documentation will be available at your CloudFront URL shortly."
          echo "Note: CloudFront invalidation may take a few minutes to complete."

  notify:
    name: Notify on failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()

    steps:
      - name: Send failure notification
        run: |
          echo "Deployment failed! Check the workflow logs for details."
          # Add Slack/email notification here if needed
