name: Deploy Documentation to AWS

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'src/**'
      - '.github/workflows/deploy-docs.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
  S3_BUCKET: ${{ secrets.DOCS_S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.8.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Configure Git for private repositories
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          git config --global url."https://${GH_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Create temporary directories
        run: |
          mkdir -p tmp/mkdocs-multirepo

      - name: Build documentation
        run: |
          poetry run mkdocs build --strict

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync documentation to S3
        run: |
          aws s3 sync site/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=3600" \
            --metadata-directive REPLACE

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Post deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const message = `Documentation deployment ${status}`;

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              description: message,
              context: 'docs/deploy'
            });
