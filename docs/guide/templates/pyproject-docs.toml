# Documentation Configuration Template for pyproject.toml
# Add these sections to your existing pyproject.toml file

# ============================================================================
# DOCUMENTATION DEPENDENCIES
# Add to your [tool.poetry.group.docs.dependencies] section
# ============================================================================

[tool.poetry.group.docs.dependencies]
# Core documentation tools
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
pdoc = "^14.0.0"

# MkDocs plugins
mkdocs-mermaid2-plugin = "^1.0.0"
mkdocs-git-revision-date-localized-plugin = "^1.2.0"
mkdocs-minify-plugin = "^0.7.0"

# Markdown extensions
pymdown-extensions = "^10.0.0"

# Optional: Additional useful plugins
# mkdocs-awesome-pages-plugin = "^2.9.0"  # Better page organization
# mkdocs-redirects = "^1.2.0"              # URL redirects
# mkdocs-macros-plugin = "^1.0.0"          # Jinja2 macros in markdown

# ============================================================================
# DOCUMENTATION SCRIPTS
# Add to your [tool.poetry.scripts] section
# ============================================================================

[tool.poetry.scripts]
# Documentation generation and serving
docs-code = "bash -c 'pdoc -o docs/reference/code --math --mermaid src/**/*.py'"
docs-serve = "mkdocs serve --dev-addr 0.0.0.0:8000"
docs-build = "mkdocs build"
docs-clean = "bash -c 'rm -rf docs/reference/code/* site/*'"
docs-deploy = "mkdocs gh-deploy --force"

# Combined workflows
docs-full = "bash -c 'poetry run docs-clean && poetry run docs-code && poetry run docs-build'"
docs-dev = "bash -c 'poetry run docs-code && poetry run docs-serve'"

# ============================================================================
# PDOC CONFIGURATION
# ============================================================================

[tool.pdoc]
# Output configuration
output_directory = "docs/reference/code"
include_undocumented = true
show_source = true

# Content features
math = true                    # Enable MathJax rendering
mermaid = true                # Enable Mermaid diagrams
search = true                 # Include search functionality

# Template customization (optional)
# template_directory = "docs/templates/pdoc"

# Module inclusion/exclusion
# include = ["src.your_package.*"]
# exclude = ["src.your_package.tests.*"]

# Footer customization
footer_text = "Generated by pdoc for FactFiber.ai"

# ============================================================================
# DEVELOPMENT SCRIPTS (Optional)
# Add these to make development easier
# ============================================================================

# Additional scripts section (extend the previous [tool.poetry.scripts])
# Linting and formatting
lint = "pre-commit run --all-files"
format-code = "bash -c 'black src/ && isort src/'"
type-check = "mypy src/"

# Testing with documentation validation
test-all = "bash -c 'pytest && poetry run docs-build'"
test-docs = "bash -c 'poetry run docs-build --strict'"

# Development environment setup
dev-setup = "bash -c 'poetry install --with docs,dev && pre-commit install'"

# ============================================================================
# EXAMPLE CONFIGURATION SECTIONS
# These show how to configure other tools that work well with documentation
# ============================================================================

# Black code formatter
[tool.black]
line-length = 80
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude generated documentation
  docs/api/
  | site/
)/
'''

# isort import sorter
[tool.isort]
profile = "black"
line_length = 80
skip_glob = ["docs/api/*", "site/*"]

# MyPy type checker
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "docs/api/",
    "site/",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "docs/*",
    "site/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

# ============================================================================
# PRE-COMMIT HOOKS CONFIGURATION
# Create .pre-commit-config.yaml with documentation checks
# ============================================================================

# Example .pre-commit-config.yaml content:
#
# repos:
#   - repo: https://github.com/pre-commit/pre-commit-hooks
#     rev: v4.4.0
#     hooks:
#       - id: check-yaml
#       - id: check-toml
#       - id: check-markdown
#       - id: trailing-whitespace
#         exclude: '^docs/api/'
#       - id: end-of-file-fixer
#         exclude: '^docs/api/'
#
#   - repo: https://github.com/psf/black
#     rev: 23.7.0
#     hooks:
#       - id: black
#
#   - repo: https://github.com/pycqa/isort
#     rev: 5.12.0
#     hooks:
#       - id: isort
#
#   - repo: local
#     hooks:
#       - id: docs-build
#         name: Build documentation
#         entry: poetry run docs-build
#         language: system
#         files: '^(docs/|src/|mkdocs\.yml)'
#         pass_filenames: false

# ============================================================================
# USAGE EXAMPLES
# ============================================================================

# After adding these configurations, you can use:
#
# # Install documentation dependencies
# poetry install --with docs
#
# # Generate API documentation
# poetry run docs-api
#
# # Serve documentation locally
# poetry run docs-serve
#
# # Build static documentation
# poetry run docs-build
#
# # Full documentation build (clean + API + build)
# poetry run docs-full
#
# # Development mode (API + serve)
# poetry run docs-dev
#
# # Deploy to GitHub Pages
# poetry run docs-deploy
#
# # Clean generated files
# poetry run docs-clean

# ============================================================================
# CUSTOMIZATION NOTES
# ============================================================================

# 1. Replace "your_package" with your actual package name
# 2. Adjust source paths if your code is not in src/
# 3. Add additional dependencies as needed for your specific use case
# 4. Customize pdoc configuration based on your documentation needs
# 5. Update script commands to match your project structure
